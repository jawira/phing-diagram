<?xml version="1.0" encoding="UTF-8"?>

<project name="PhingVisualizer" default="properties">

    <!--Setup-->
    <target name="setup" description="Prepare library for dev">
        <phingcall target="composer:install"/>
        <phingcall target="make:phpunit.phar"/>
    </target>

    <!--Available properties-->
    <target name="properties" description="List all properties">
        <echoproperties/>
    </target>

    <target name="check-phing-version" description="Require at least Phing v3">
        <fail message="Install Phing v3 or newer">
            <condition>
                <not>
                    <phingversion atleast="3.0"/>
                </not>
            </condition>
        </fail>
    </target>

    <!--composer install-->
    <target name="composer:install" description="Install dependencies"
            depends="check-phing-version">
        <composer>
            <arg value="install"/>
            <arg value="--no-interaction"/>
            <arg value="--prefer-dist"/>
        </composer>
    </target>

    <!--composer install for prod-->
    <target name="composer:optimize" description="Install dependencies optimized for production environment"
            depends="check-phing-version">

        <composer>
            <arg value="install"/>
            <arg value="--no-dev"/>
            <arg value="--optimize-autoloader"/>
            <arg value="--prefer-dist"/>
        </composer>
    </target>

    <!--composer validate-->
    <target name="composer:validate" description="Checks if composer.json is valid"
            depends="check-phing-version">
        <composer>
            <arg value="validate"/>
            <arg value="--strict"/>
            <arg value="--no-check-lock"/>
        </composer>
    </target>

    <!--Run PHPUnit-->
    <target name="phpunit:run" description="Run PHPUnit's tests" depends="make:phpunit.phar">
        <exec executable="${project.basedir}/phpunit.phar" passthru="true" checkreturn="true"/>
    </target>

    <!--php -l -->
    <target name="php:check-syntax" description="Check syntax on PHP files" depends="filesets">
        <!--All project's PHP files, excluding vendor dir-->
        <phplint>
            <fileset refid="php_files"/>
        </phplint>
    </target>

    <!--Register your filesets here-->
    <target name="filesets">
        <fileset dir="${project.basedir}" id="php_files">
            <include name="**/*.php"/>
            <exclude name="vendor/"/>
            <exclude name=".idea/"/>
        </fileset>
    </target>

    <target name="test" description="Test library"
            depends="composer:install, php:check-syntax, phpunit:run, composer:validate"/>

    <target name="make:cc-test-reporter" description="Download CodeClimate test reporter">
        <exec command="make cc-test-reporter" passthru="true"/>
    </target>

    <target name="make:phpunit.phar" description="Download PHPUnit">
        <exec command="make phpunit.phar" passthru="true"/>
    </target>

    <target name="code-climate:before" description="CodeClimate before build" depends="make:cc-test-reporter">
        <exec executable="${project.basedir}/cc-test-reporter" passthru="true">
            <arg value="before-build"/>
        </exec>
    </target>

    <target name="code-climate:after" description="CodeClimate after build" depends="make:cc-test-reporter">
        <exec executable="${project.basedir}/cc-test-reporter" passthru="true">
            <arg value="format-coverage"/>
            <arg value="-tclover"/>
            <arg value="${project.basedir}/resources/coverage/clover.xml"/>
        </exec>
        <exec executable="${project.basedir}/cc-test-reporter" passthru="true">
            <arg value="upload-coverage"/>
        </exec>
    </target>
</project>
